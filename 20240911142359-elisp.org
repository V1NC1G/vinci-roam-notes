:PROPERTIES:
:ID:       33DB4F82-645E-4A52-A8B0-28CE25327DE2
:END:
#+title: Elisp
#+tags: [[id:8D8C89CD-0D59-4314-BC77-D24453E43D7E][Programming]]

* Table of Contents :toc:
- [[#things-to-take-noteresearch-more][Things to take note/research more]]
- [[#list-processing][List Processing]]
- [[#practicing-evaluation][Practicing Evaluation]]
- [[#writing-function-definitions][Writing Function Definitions]]
  - [[#wrting-an-interactive-function][Wrting an ~interactive~ function]]
  - [[#install-code-permanently][Install Code Permanently]]
  - [[#let][~let~]]
  - [[#if][~if~]]
  - [[#save-excursion][~save-excursion~]]

* Things to take note/research more
- Byte compiling
  - When, how, and why is it used?
    
* List Processing

Lists are bouned by paretheses, and sometimes preceded by an apostrophe. It looks like: ~'(rose violet daisy buttercup)~.

Lisp "atoms" are words/values that cannot be divided into any smaller parts.

A printed representation of woth atoms and lists are called *symbolic expressions* or ~s-expressions~.

Types of /atoms/:
- Symbols: ~(foo bar foo-bar)~
- Numbers: ~(1 2 3)~
- String: ~("hello world")~

When a list have a "quote" (~'(+ 2 2)~) that precedes the list, it tells Lisp to *do nothing* with the list, other than take it as it is written. If there is no quote preceding the list then the *first* item of the list becomes a *command* (function) for the machine to obey.

* Practicing Evaluation
A file and a buffer are two different entities. A file is information recorded permanently in the computer. A buffer is information inside Emacs that will vanish at the end of the editing session.

* Writing Function Definitions
Structure:
#+begin_src emacs-lisp
  (defun FUNCTION-NAME (ARGUMENTS...)
    "OPTIONAL-DOCUMENTATION..."
    (interactive ARGUMENT-PASSING-INFO)
    BODY...)
#+end_src

Before we evaluate a function we defined, it is important that we first tell the computer about the definition, basically loading the function definition in Emacs.

To install a function definition, we just need te evaluate the ~defun~, then we can evaluate the function call.

** Wrting an ~interactive~ function
#+begin_src emacs-lisp
  (defun multiply-by-seven (number)
    "Multiply NUMBER by seven."
    (interactive "p")
    (message "The result is %d" (* 7 number)))
#+end_src

The expression ~(interactive "p")~ is a list of two elements. The ~"p"~ tells Emacs to pass the *prefix argument* to the function and use its value for the argument of the function.

There are different options for ~interactive~. The ~"p"~ as shown earlier is used for a prefix argument with the function. In almost any case, every option for ~interactive~ will enable the user to pass the right information /interactively/ to a function.

** Install Code Permanently
1. To install code permanently, define the function in the initialization file (~.emacs~ or ~.emacs.d/init.el or ~.config/emacs/init.el~). Code in the init file is automaticall evaluated when we start Emacs.
2. Put the function definition in their own files and use the ~load~ function to evaluate the functions.
3. Define the function in a file called ~site-init.el~ which is loaded when Emacs is built. This makes the code available to everyone who uses your machine.

** ~let~
~let~ is used to attach or bind a symbol to a value in such a way that the interpreter will not confuse the variable with a variable of the same name.

Structure:
#+begin_src emacs-lisp
  (let VARLIST BODY...)
#+end_src

~VARLIST~: list, where each element of which is either a symbol by itself or a two-element list, the first element of which is a symbol.

Basically symbols in the varlist are the variables that are given a value, either nil, or the value of the second element if it is a two-element list.

If the varlist is composed of two-element lists, the template for the ~let~ expression looks like this:

#+begin_src emacs-lisp
  (let ((VARIABLE VALUE)
        (VARIABLE VALUE)
        ...)
    BODY...)
#+end_src

Sample:
#+begin_src emacs-lisp
  (let ((zebra "stripes")
        (tiger "fierce"))
    (message "One kind of animal has %s and another is %s." zebra tiger))
#+end_src

~let~ binds variables using "dynamic binding" by default, and by "lexical binding", which is the preferred form of binding.

To enable lexical binding, add ~;;; -*- lexical-binding: t -*-~ in the first line of your Elisp file.

*** Lexical vs Dynamic Binding

*Lexical Binding*: Variables defined within ~let~ are valid only within the body of the ~let~ expression.

*Dynamic Binding*: The variables created are valid during the execution of the ~let~ expression. Meaning that when we call a function within that ~let~ expression, it can see these local variables, regardles of where the function is defined.

Example:
#+begin_src emacs-lisp
  (setq x 0)

  (defun getx () x)

  (setq x 1)

  (let ((x 2))
    (getx))
#+end_src

With the example above, ~getx~ will return 1 when lexical binding is enabled, and 2 if we use dynamic binding.

This is because for lexical binding, the binding of ~x~ at the /global/ level, where ~getx~ is defined, is 1. It does not see the value of ~x~ inside the ~let~ body because the function ~getx~ is not defined inside the ~let~ body.

For dynamic binding however, ~getx~ returns 2 because it sees the value of ~x~ inside the ~let~ body.

** ~if~
Structure:
#+begin_src emacs-lisp
  (if TRUE-OR-FALSE-TEST
      ACTION-TO-CARRY-OUT-IF-TEST-IS-TRUE)
#+end_src

Example:
#+begin_src emacs-lisp
  (defun type-of-animal (characteristic)
    "Print message in an echo area depending on CHARACTERISTIC.
  If the CHARACTERISTIC is the string \"fierce\",
  then warn of a tiger."
    (if (equal characteristic "fierce")
        (message "It is a tiger!")))
#+end_src

Using with an else-statement:
#+begin_src emacs-lisp
  (defun type-of-animal (characteristic)
    "Print message in an echo area depending on CHARACTERISTIC.
  If the CHARACTERISTIC is the string \"fierce\",
  then warn of a tiger."
    (if (equal characteristic "fierce")
        (message "It is a tiger!")
      (message "It is not fierce!")))

  (type-of-animal "fierce")
  (type-of-animal "striped")
#+end_src

*** ~nil~
The symbol ~nil~ has two meanings, either an empty list, or ~false~. It can be written as an empty list '()' or as 'nil'.

** ~save-excursion~
~save-excursion~ is very common for Elisp programs used for editing. It saves the location of point, executes the body of a function, and then restores point to its previous position if the location was changed.

Its primary purpose is to keep the user from being surprised and disturbed by unexpected movement of point.

*** Point and Mark
*Point*: Current location of the cursor.
*Mark*: A position in the buffer where the user can set. Setting another mark saves the previous mark in the /mark ring/.

The area between the point and the mark is called the /region/.

*** ~save-excursion~ code
Template:
#+begin_src emacs-lisp
  (save-excursion
    BODY...)
#+end_src

In Elisp, ~save-excursion~ often occurs within the body of a ~let~ expression:
#+begin_src emacs-lisp
  (let VARLIST
    (save-excursion
      BODY...))
#+end_src
