:PROPERTIES:
:ID:       8C39A07E-2B4A-422E-90B8-211448BECABB
:END:
#+title: IPv4
#+tags: [[id:FBE26796-7C93-4221-9192-CD1079C2432B][Network Layer]]

* Table of Contents :toc:
- [[#introduction][Introduction]]
- [[#ip-version-4][IP Version 4]]
- [[#multihoming][Multihoming]]
- [[#address-assignment][Address Assignment]]
  - [[#subnetting][Subnetting]]
  - [[#address-classes][Address Classes]]
- [[#address-allocation][Address Allocation]]
  - [[#classless-interdomain-routing][Classless Interdomain Routing]]
  - [[#special-ipv4-addresses][Special IPv4 Addresses]]
- [[#ipv4-packets][IPv4 Packets]]
  - [[#packet-header-fields][Packet Header Fields]]
  - [[#handling-forwarding-loops-with-ttl][Handling Forwarding Loops with TTL]]
- [[#packet-fragmentation][Packet Fragmentation]]
  - [[#how-fragmentation-works][How Fragmentation Works]]
  - [[#how-reassembly-works][How Reassembly Works]]

* Introduction

The *Internet Protocol (IP)* is the network layer protocol of the TCP/IP suite. The flexibility of IP and its ability to use various types of underlying data link layer technologies is one of its key advantages.

* IP Version 4

The design of IPv4 is based on the following assumptions:
- IP should provide an unreliable connectionless service.
- IP operates with the datagram transmission mode.
- IP hosts must have fixed size 32-bit addresses.
- IP must be compatible with a variety of data link layers.
- IP hosts should be able to exchange variable-data length packets.

IPv4 addresses are written as *32 bit numbers in dotted decimal format*, such as a sequence of four integers separated by dots (~1.2.3.4~). Every decimal in the IP address represents eight bits.

* Multihoming

IPv4 addresses are used to identify an *interface on a router* or an *interface on a host*.

A router has thus as many IPv4 addresses as the number of interfaces that it has in the data link layer. With the growth of wireless, more and more hosts have several data link layer interfaces (for example, an Ethernet interface and a WiFi interface). These hosts are said to be *mulithomed*. A multihomed host with two interfaces has thus two IPv4 addresses.

* Address Assignment

Appropriate network layer address allocation is key to the efficiency and scalability of the Internet.

A *naive allocation scheme* is to provide an IPv4 address to each host when the host is attached to the Internet on a first come, first serve basis. This however would force all routers to maintain a specific route to a billion or more hosts on the Internet which is *not scalable*.

It is important to minimize the number of routes that are stored on each router.

** Subnetting

One solution is that routers only maintain routes towards *blocks of addresses* and not towards individual hosts. These blocks of addresses are assigned to ISPs where they assign *sub blocks* of the assigned address space in a hierarchical manner. *These sub blocks of IP addresses are called subnets.*

A typical subnet groups all the hosts that are part of the same enterprise. An enterprise network is usually composed of several LANs interconnected by routes. A small block of addresses from the enterprise's block is usually *assigned to each LAN*. The address is composed of two parts:
1. A *subnetwork identifier* composed of the high order bits of the address.
2. A *host identifier* encoded in the lower order bits of the address.

Example:
#+begin_src 
  10001010001100000001101 000000001
#+end_src

The bits before the space is the *subnetwork ID* and the bits after the space is the *host ID*.

** Address Classes

When a router needs to forward a packet, it must know the subnet of the destination address to be able to consult its routing table to forward the packet. There are three definitions of classes of addresses.

| *Class* | *High-order bits* | *Length of subnet id* | *Number of networks* | *Addresses per network* |
|---------+-------------------+-----------------------+----------------------+-------------------------|
| Class A |                 0 | 8 bits                | $128(2^7)$           | $16,777,216(2^{24})$    |
| Class B |                10 | 16 bits               | $16,384(2^{14})$     | $65,536(2^{16})$        |
| Class C |               110 | 24 bits               | $2,097,152(2^{21})$  | $256(2^8)$              |

In this *classful address scheme*, the range of IP addresses in each class are as follows:
- Class A: ~0.0.0.0~ to ~127.255.255.255~
- Class B: ~128.0.0.0~ to ~191.255.255.255~
- Class C: ~192.0.0.0~ to ~223.255.255.255~
- Class D: ~224.0.0.0~ to ~239.255.255.255~
- Class E: ~240.0.0.0~ to ~255.255.255.255~

Class D IP addresses are used for *multicast* whereas Class E IP addresses are *reserved* and can't be used on the Internet. Classes A, B, and C are the ones used for regular purposes.

*** Subnet Masks

Every network that falls into one of these classes has a fixed number of bits in a network to identify the network itself. The subnet mask "masks" the network part of the IP address and leaves the host part open.

For example, a subnet mask of a class C address could be ~203.128.22.0~ where the first 3 octets represent the subnet mask and the last octet can be used to identify hosts within this network. ~203.129.22.10~ can be one machine in this network.

The reason why the first 3 octets in a class C address represent the subnet mask is that it is the length of the *subnet ID* for a class C address. Remember that an octet represents 8 bits, and for 24 bits in a class C address to represent the subnet ID is the first 3 octets in the address.

*** Network Address

It is just the address with the host bits set to ~0~. So ~203.128.22.0~ is the network address. It is just used for forwarding table entries.

*** Broadcast Address

Address where the host bits are all set to one. It is used to broadcast a packet to all devices in a network. In this case, ~203.128.22.255~ is the broadcast address.

*** Default Subnet Masks

| *Class* | *Default Subnet Mask* |
|---------+-----------------------|
| Class A |             255.0.0.0 |
| Class B |           255.255.0.0 |
| Class C |         255.255.255.0 |

*** Variable-Length Subnets

With variable-length subnets, the subnet identifier can be any size from 1 to 31 bits. It allows operators to use a subnet that better matches the number of expected hosts that will use the subnet.

A subnet identifier or IPv4 prefix is usually represented as *A.B.C.D/p* where *A.B.C.D is the network address* and *p is the length of the subnet identifier bits*.

For example, ~10.0.0.0/30~ allows for *4 addresses* in total. The calculation for this is $2^n$ where ~n~ is the number of bits available for the host address. In this case ~n = 2(32 total bits - 30 bits for the network) = 2 bits for the host~. The lowest address is ~10.0.0.0~ as the *network address*, followed by ~10.0.0.1~ and ~10.0.0.2~ for the useable IP address, and finally ~10.0.0.3~ as the *broadcast address.

* Address Allocation

** [[id:11CA590B-F567-44FD-BA9C-C431540ED954][Classless Interdomain Routing]]

** Special IPv4 Addresses

- ~0.0.0.0/8~: Reserved for self identification.
- ~127.0.0.0/8~: Reserved for *loopback addresses*.
- ~10.0.0.0/8, 172.16.0.0/12, and 192.168.0.0/16~: Reserved for private networks that are not directly attached to the Internet. These are often called *private addresses*.
- ~169.254.0.0/16~: Used for local link addresses. Some hosts use an address in this block when they're connected to a network that does not allocate addresses as expected.

* IPv4 Packets

All IPv4 packets use a 20 byte header. Some contains an optional header extension.

** Packet Header Fields

*** Version
- 4 bits
- Indicates the version of the IP used to build the header.
- Using this field allows the network layer protocol to evolve.

*** IP Header Length (IHL)
- 4 bits
- Indicates the length of the IP header in 32-bit words.
- Allows IPv4 to use options if required.
- The whole header cannot be longer than 64 bytes.

*** DS Field
- 8 bits
- Used for quality of service.

*** Length Field
- 16 bits
- Indicates the total length of the IPv4 packet in bytes.
- IPv4 packet cannot be longer than 65535 bytes.

*** Identification
- 16 bits
- Identification number user for reassembling and fragmenting a packet.

*** Flags
- 3 bits

*** Fragment Offset
- 13 bits
- Useful for reassembling a packet from its fragments.

*** Time to Live
- 8 bits
- Decremented at each *hop*.
- When it becomes ~0~, the packet is considered to be in the network for too long and is *dropped*.
- The message is then sent back to the packet's source.

*** Protocol Field
- 8 bits
- Indicates the transport layer protocol that must process the packet's payload at the destination.
- Common values for this field are ~6~ for TCP and ~17~ for UDP.

*** Checksum
- 16 bits
- Protects the IPv4 header against transmission errors.

*** Source Address Field
- 32 bits
- Contains the IPv4 address of the source host.

*** Destination Address Field
- 32 bits
- Contains the IPv4 address of the destination host.

*** Options

The options is not used very often. It is generally used to test out experimental features.

*** IP Data

This is the *payload*. It is not part of the checksum.

** Handling Forwarding Loops with TTL

TTL or *Time To Live* is an 8 bit field in an IPv4 packet header. This field is used by IPv4 to avoid the risk of having an IPv4 packet caught in an infinite loop due to a transient or permanent error in routing tables.

The TTL field ensures that even if there are forwarding loops in the network, packets will not loop forever.

* Packet Fragmentation

Although IPv4 packets can be as big as 64kb, very few data link layer technologies can send a 64kb IPv4 packet inside a frame. To solve this problem, IPv4 includes a *packet fragmentation and reassembly mechanism* in both host and intermediate routers.

** How Fragmentation Works

The IPv4 fragmentation mechanism relies on four fields of the IPv4 header:
- Length
- Identification
- Flags
  - More fragments: Indicates that more fragments are coming. It will be set in all fragments except the last one.
  - Don't Fragment (DF): When this flag is set, it indicates that the packet cannot be fragmented.
- Fragment Offset

*** IPv4 Basic Fragmentation Operation

- A large fragment is fragmented into two or more fragments where the size of all the fragments, except the last one is equal to the *Maximum Transmission Unit* of the link used to forward the packet.
- The *Length* field indicates the length of the payload and the header of the fragment.
- When fragmented, the *Identification* of the large packet is copied in all fragments to allow for packet reassembly.
- The *Fragment Offset* indicates the position of the payload of the fragment, in the payload of the original fragment.

** How Reassembly Works

Fragments may arrive at the destination in any order since fragments are forwarded independently in the network and may follow different paths. Some fragments might also get lost and never reach the destination.

The reassembly algorithm used by the destination host is a follows:
1. The destination can verify the packet if it is a fragment or not by checking the *flags* value in the header and the *fragment offset*.
   - If the *Fragment Offset* is ~0~, and the *More Fragments* flag is reset, the received packet has not been fragmented.
   - Otherwise the fragment is fragmented and needs to be assembled.
2. Relies on the *Identification* field to associate a fragment with the corresponding packet being assembled.
3. The *Fragment Offset* indicates the position of the fragment payload in the original unfragmented packet.
4. The packet with the More Fragments flag reset allows the destination to determine the total length of the original unfragmented packet.

*** Handling Loss and Duplicates

The destination can easily identify *fragment duplication* with the *Fragment Offset*.

To deal with *fragment losses*, the reassembly algorithm must bind the time during which the fragments of a packet are stored in its buffer while the packet is being assembled. This can be implemented by starting a timer when the first fragment of a packet is received. If the packet is not reassembled within the alloted time then all fragments are discarded and the packet is considered to be lost.
