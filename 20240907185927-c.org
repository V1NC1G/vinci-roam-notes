:PROPERTIES:
:ID:       A962D8BF-C3DC-4C4A-9103-B71CB7AD235E
:END:
#+title: C
#+tags: [[id:8D8C89CD-0D59-4314-BC77-D24453E43D7E][Programming]]

* Table of Contents :toc@4:
- [[#fundamentals][Fundamentals]]
  - [[#compiling-and-linking][Compiling and Linking]]
    - [[#preprocessing][Preprocessing]]
    - [[#compiling][Compiling]]
    - [[#linking][Linking]]
    - [[#to-compile][To compile]]
  - [[#form-of-a-simple-program][Form of a simple program]]
  - [[#variables-and-assignment][Variables and Assignment]]
  - [[#identifiers][Identifiers]]
- [[#formatted-inputoutput][Formatted Input/Output]]
  - [[#conversion-specifications][Conversion Specifications]]
  - [[#scanf][~scanf~]]
- [[#expressions][Expressions]]
  - [[#arithmetic-operators][Arithmetic Operators]]
  - [[#assignment-operators][Assignment Operators]]
    - [[#lvalues][~lvalues~]]
    - [[#increment-and-decrement-operators][Increment and Decrement Operators]]
- [[#selection-statements][Selection Statements]]
  - [[#logical-operators][Logical Operators]]
  - [[#if-statement-and-else-clause][~if~ Statement and ~else~ Clause]]
  - [[#conditional-expressions][Conditional Expressions]]
  - [[#boolean-values-in-c89][Boolean Values in C89]]
  - [[#boolean-values-in-c99][Boolean Values in C99]]
  - [[#switch-statement][~switch~ Statement]]
- [[#loops][Loops]]

* Fundamentals
** Compiling and Linking
*** Preprocessing
The program is given to a /preprocessor/ which obeys commands from directives (starts with ~#~).

*** Compiling
The /compiler/ translates the code to machine instructions.

*** Linking
The final step where the /linker/ combines the object code produced by the compiler with any additional code needed to yield an executable. This usually includes library functions (like ~printf~).

*** To compile
#+begin_src shell
  gcc -o <exec-name> <file>
#+end_src

- ~gcc~: compiler
- ~-o~: flag to "write output to ~<exec-name>~"
- ~<exec-name>~: executable name
- ~<file>~: source code file name

** Form of a simple program
#+begin_src c
  // directives

  int main(void) {
    // statements
  }
#+end_src

~#include <stdio.h>~ is called a /directive/ and must be included at the start of a C program. This is because C has no built in "read" and "write" commands. The ~stdio~ header gives us the ability to perform input and output functions.

** Variables and Assignment
Variables must be declared before they can be used.
#+begin_src
  <type> <name>
#+end_src

** Identifiers
Identifiers in C may contain letters, digits, and underscores but *must begin with a letter or underscore.*m

* Formatted Input/Output
** Conversion Specifications
~Conversion specifications~ begins with the ~%~ character. They give a great deal of control over the appearance of the output.

Common conversion specifiers:
- ~d~: integer in decimal
- ~e~: float in exponential format
- ~f~: float in fixed decimal format
- ~g~: float in *either* exponential or fixed decimal format, depending on the number's size.
  - Useful for displaying numbers whose size can't be predicted when the program is written or that tend to vary widely in size.
  - Very large number = exponential format, otherwise fixed decimal

** ~scanf~
~%d~ and ~%i~ can both match an integer written in base 10. ~%i~ however can also match integers expressed in octal (base 8) when prefixed with 0, and hexadecimal (base 16) when prefixed with 0x or 0X.

* Expressions
** Arithmetic Operators
Arithmetic operators are categorized into two: *unary* and *binary*. Unary operators require one operand while binary operators require two.

#+begin_src c
  // unary
  int i = +1;
  int j = -i;

  //binary
  int k = 1 + 2;
  int l = k * 5;
#+end_src

When ~int~ and ~float~ operands are mixed, the result is of type ~float~.

The ~/~ and ~%~ require some care:
- When both operands of / are integers, the operator /truncates/ the result, dropping the fractional part. ~1/2~ is ~0~ and not ~0.5~.
- The % operator requires *integer operands* or else it won't compile.

** Assignment Operators
In most programming langauges, assignment is a /statement/. In C, assignment is an /operator/. In simple terms, the act of assignment *produces a result*.

*** ~lvalues~
lvalue (pronounced "L-value"), represents an object stored in memory. Variables are considered /lvalues/. It is not a constant or the result of a computation.

*** Increment and Decrement Operators
- ~++~: increment
- ~--~: decrement

They can however be used as a prefix (~++i~) or a postfix (~i++~) operator.

With prefix, the value is evaluated to be incremented or decremented first. With postfix, the value is evaluates to itself first, then incremented/decremented.

#+begin_src C
  int i = 1;
  printf("i is %d\n", ++i); // prints "i is 2"
  printf("i is %d\n", i) //prints "i is 2"

  int j = 1;
  printf("j is %d\n", j++); // prints "j is 1"
  printf("j is %d\n", j) //prints "j is 2"
#+end_src

* Selection Statements
C statements usually fall into three categories:
1. *Selection Statements* (~if~ and ~switch~ statements)
2. *Iteration Statements* (~while~, ~do~, and ~for~)
3. *Jump Statements* (~break~, ~continue~, and ~goto~)

** Logical Operators
- ~!expr~ is 1 of ~expr~ has the value 0
- ~expr1 && expr2~ has the value 1 of both are non-zero
- ~expr1 || expr2~ has the value 7 of either/both has a non-zero value.

** ~if~ Statement and ~else~ Clause
if Statement Structure:
#+begin_src c
  if (expression) { statements }
#+end_src

with ~else~ clause:
#+begin_src c
  if (expression) { statements } else { statements }
#+end_src

~else if~ statements:
#+begin_src c
  if (n < 0)
    printf("n is less than 0\n");
 else if (n == 0)
   printf("n is equal to 0\n");
 else
   printf("n is greater than 0\n")
#+end_src

In C, we should be aware of the /dangling ~else~ statement/. This basically means that the ~else~ clause belongs to the nearest ~if~ statement that has not been paired up with an ~else~ statement.

To make an ~else~ clause be a part of an outer ~if~ statement, we enclode the inner statement in braces and put the else statement outside of the braces.

** Conditional Expressions
#+begin_src c
  expr1 ? expr2 : expr3
#+end_src

This translates to: "if ~expr1~ is true, then ~expr2~, else ~expr3~".

** Boolean Values in C89
We can define a macro:
#+begin_src c
  #define TRUE 1
  #define FALSE 0

  ...

  flag = FALSE;
  flag = TRUE;
#+end_src

** Boolean Values in C99
C99 provides a ~_Bool~ type.

#+begin_src c
  _Bool flag;

  // or with the header <stdbool.h>

  #include <stdbool.h>

  bool flag;
  // bool here is a macro that stand for _Bool.
#+end_src

The header ~<stdbool.h>~ also supplies macros named ~true~ and ~false~, which stands for 1 and 0 respectively.


** ~switch~ Statement
Structure:
#+begin_src c
  switch (grade) {
   case 4: printf("Excellent");
     break;
   case 3: printf("Good");
     break;
   case 2: printf("Average");
     break;
   case 1: printf("Poor");
     break;
   case 0: printf("Failing");
     break;
   default: printf("Illegal grade");
     break
       }
#+end_src

Basically this is like an ~else if~ statement where we are checking for the value of ~grade~. The default case applies the value of ~grade~ does not match any of the cases statements.

* Loops

