:PROPERTIES:
:ID:       9B21C34B-A914-4D3E-90F6-3E25F6A02C6F
:END:
#+title: Python OOP
#+tags: [[id:F67AB522-3EBC-4FE9-A002-34E1F7799254][OOP]]

* Table of Contents :toc@4:
- [[#class-vs-instance-variables][Class vs Instance Variables]]
- [[#methods-in-a-class][Methods in a Class]]
  - [[#instance-methods-methods][Instance Methods (Methods)]]
  - [[#class-methods][Class Methods]]
  - [[#static-methods][Static Methods]]
  - [[#access-modifiers][Access Modifiers]]
    - [[#public-attributes][Public Attributes]]
    - [[#private-attributes][Private Attributes]]
- [[#information-hiding][Information Hiding]]
  - [[#encapsulation][Encapsulation]]
    - [[#getters--setters][Getters & Setters]]
- [[#inheritance][Inheritance]]
  - [[#implementation][Implementation]]
  - [[#super-function][~super()~ function]]
    - [[#use-cases][Use Cases]]
      - [[#accessing-parent-class-properties][Accessing parent class properties]]
      - [[#calling-the-parent-class-methods][Calling the parent class methods]]
      - [[#using-with-initializers][Using with initializers]]
  - [[#types-of-inheritance][Types of Inheritance]]
    - [[#single-inheritance][Single Inheritance]]
    - [[#multi-level-inheritance][Multi-level Inheritance]]
    - [[#hierarchical-inheritance][Hierarchical Inheritance]]
    - [[#multiple-inheritance][Multiple Inheritance]]
    - [[#hybrid-inheritance][Hybrid Inheritance]]
  - [[#advantages-of-inheritance][Advantages of Inheritance]]
    - [[#reusability][Reusability]]
    - [[#code-modification][Code Modification]]
    - [[#extensibility][Extensibility]]
    - [[#data-hiding][Data Hiding]]
- [[#polymorphism][Polymorphism]]
  - [[#implementing-polymorphism-using-methods][Implementing Polymorphism Using Methods]]
  - [[#implementing-polymorphism-using-inheritance][Implementing Polymorphism using Inheritance]]
  - [[#method-overriding][Method Overriding]]
    - [[#advantages-and-key-features][Advantages and Key Features]]
  - [[#operator-overloading][Operator Overloading]]
    - [[#overloading-operators-in-python][Overloading operators in Python]]
    - [[#overloading-operators-for-a-user-defined-class][Overloading operators for a user-defined class]]
    - [[#special-functions-for-some-common-operators][Special functions for some common operators]]
  - [[#implementing-polymorphism-using-duck-typing][Implementing Polymorphism using Duck Typing]]
  - [[#abstract-base-classes][Abstract Base Classes]]
    - [[#syntax][Syntax]]
- [[#object-relationships][Object Relationships]]
  - [[#relationships-between-classes][Relationships Between Classes]]
  - [[#association][Association]]
  - [[#aggregation][Aggregation]]
  - [[#composition][Composition]]

* Class vs Instance Variables

Class variables are shared by all instances or objects of the classes. A change would affect all the instances.

Instance variables are *unique* to each instance. A change would affect the value in that specific object only.

Implementation:
#+begin_src python
  class ClassVar:
      teamName: "Arsenal" # class variable

      def __init__(self, name):
          self.name = name # instance variable
#+end_src

* Methods in a Class
** Instance Methods (Methods)
#+begin_src python
  class Test:
      def __init__(self, arg1, arg2):
          self.arg1 = arg1
          self.arg2 = arg2

      def test_method(self):
          result = self.arg1 + self.arg2
          return result
#+end_src

~self~ is a variable that represents the object itself. Take note that the first variable in an instance object is always a reference to the object. The variable name does not matter as long as it is also the same one used when referencing instance variables.

** Class Methods
#+begin_src python
  class Test:
      classVariable = "test"

      @classmethod
      def test_demo(cls):
          return cls.classVariable


  print(Test.test_demo())
#+end_src

Class methods work with *class variables*. It can be accessed using the class name rather than its object.

They are usually used to access and modify class variables

~cls~ works like ~self~.

** Static Methods
#+begin_src python
  class Test:
      @staticmethod
      def demo():
          print("hello world")

  new = Test()
  print(new.demo)
#+end_src

Have no direct correlation to class or instance variables. They are used as utility functions inside the class and cannot modify class attributes.

It can be accessed using the class name or the object name.

The purpose of static methods is produce a useful result.

** Access Modifiers

*** Public Attributes
Attributes that can be accessed inside the class and outside the class.

By default, all methods and properties are publicly available.

*** Private Attributes
Cannot be accessed from outside the class but *can be accessed inside the class*.

The aim of private attributes is to keep the data hidder from users and other classes.

To make members private, we can add a ~double underscore~ prefix (~__~).

#+begin_src python
  class Employee:
      def __init__(self, ID, salary):
          self.ID = ID
          self.__salary = salary # private property

      def displaySalary(self): # public method
          print("Salary:", self.__salary)

      def __displayID(self): # private method
          print("ID:", self.ID)

  Steve = Employee(3789, 2500)
  print("ID:", Steve.ID)
  Steve.displaySalary() # will work because it is a public method and methods in the class can access the private properties inside the class
  print("Salary:", Steve.__salary) # cause an error because we are accessing a private property
  Steve.__displayID() # cause an error
#+end_src

If *absolutely necessary* to access the private properties, user can access it from outside the class using ~_<ClassName>~ prefix.

#+begin_src python
  print(Steve._Employee__salary)
#+end_src

* Information Hiding
It is good practice to limit access to class members to make an object-oriented system more reliable and error free.

Information hiding refers to the concept of *hiding the inner workings of a class* and simply providing an interface with the outside world.

Components of data hiding:
- Encapsulation
- Abstraction

** Encapsulation
A fundamental programming technique used to achieve data hiding in OOP. It refers to the binding of data and methods to manipulate data in a single unit.

When encapsulating classes, a good convention is to declare all variables of a class ~private~, which restricts direct access to the code outside the class. To communicate with the class, we implement ~public~ methods, often called as ~getters~ & ~setters~.

*** Getters & Setters
A ~getter~ method allows reading a property's value.

A ~setter~ method allows modifying a property's value.

#+begin_src python
  class User:
      def __init__(self, username=None):
          self.__username = username

      def setUsername(self, x):
          self.__username = x

      def getUsername(self):
          return (self.__username)
#+end_src

* Inheritance
Inheritance provides a way to create a class from an existing class. This new class is a specialized version of the exisiting class which inherits all the /non-private/ fields. and /methods/ of the existing class.

Basically the existing class is used as a /base point/ for the new class.

A good example that we are already using is creating a ~class~ in Python. The created class is a subclass of the built-in Python ~object class~.

** Implementation
#+begin_src python
  class ParentClass:
      # attributes

  class ChildClass(ParentClass):
      # attributes
#+end_src

Example:
#+begin_src python
  class Vehicle:
      def __init__(self, make, color, model):
          self.make = make
          self.color = color
          self.model = model

      def printDetails(self):
          print("Manufacturer:", self.make)
          print("Color:", self.color)
          print("Model:", self.model)


  class Car(Vehicle):
      def __init__(self, make, color, model, doors):
          # calling the constructor from parent class
          Vehicle.__init__(self, make, color, model)
          self.doors = doors

      def printCarDetails(self):
          self.printDetails() # inherits the method from the parent class
          print("Doors:", self.doors)


  obj1 = Car("Suzuki", "Grey", "2015", 4)
  obj1.printCarDetails()
#+end_src

** ~super()~ function
The ~super()~ function is used in a child class to *refer* to the parent class without explicitly naming it. It makes the code more manageable and there is no need to know the name of the parent class to access its attributes.

*** Use Cases

**** Accessing parent class properties
#+begin_src python
  class Vehicle:  # defining the parent class
      fuelCap = 90


  class Car(Vehicle):  # defining the child class
      fuelCap = 50

      def display(self):
          # accessing fuelCap from the Vehicle class using super()
          print("Fuel cap from the Vehicle Class:", super().fuelCap)

          # accessing fuelCap from the Car class using self
          print("Fuel cap from the Car Class:", self.fuelCap)


  obj1 = Car()  # creating a car object
  obj1.display()  # calling the Car class method display()
#+end_src

**** Calling the parent class methods
Used when the immediate child class have methods with the same name.

#+begin_src python
  class Vehicle:  # defining the parent class
      def display(self):  # defining display method in the parent class
          print("I am from the Vehicle Class")


  class Car(Vehicle):  # defining the child class
      # defining display method in the child class
      def display(self):
          super().display()
          print("I am from the Car Class")


  obj1 = Car()  # creating a car object
  obj1.display()  # calling the Car class method display()

#+end_src

**** Using with initializers
Used to call the initializer of the parent class, from inside the initializer of the child class.

#+begin_src python
  class Vehicle:
      def __init__(self, make, color, model):
          self.make = make
          self.color = color
          self.model = model

      def printDetails(self):
          print("Manufacturer:", self.make)
          print("Color:", self.color)
          print("Model:", self.model)


  class Car(Vehicle):
      def __init__(self, make, color, model, doors):
          super().__init__(make, color, model)
          self.doors = doors

      def printCarDetails(self):
          self.printDetails()
          print("Door:", self.doors)


  obj1 = Car("Suzuki", "Grey", "2015", 4)
  obj1.printCarDetails()
#+end_src

** Types of Inheritance
*** Single Inheritance
There is only one class extending from another class.

Implementation:
#+begin_src python
  class Vehicle:
        def setTopSpeed(self, speed):
            self.topSpeed = speed
            print("The top speed is set to", self.topSpeed)

  class Car(Vehicle):
        def openTrunk(self):
              print("The trunk is open.")

  corolla = Car()
  corolla.setTopSpeed(220)
  corolla.openTrunk()
#+end_src

*** Multi-level Inheritance
It is when a class is derived from a class which itself is derived from another class. The classes can be extended to as many levels as we want.

Implementation:
#+begin_src python
  class Vehicle:  # parent class
      def setTopSpeed(self, speed):  # defining the set
          self.topSpeed = speed
          print("Top speed is set to", self.topSpeed)


  class Car(Vehicle):  # child class of Vehicle
      def openTrunk(self):
          print("Trunk is now open.")


  class Hybrid(Car):  # child class of Car
      def turnOnHybrid(self):
          print("Hybrid mode is now switched on.")


  priusPrime = Hybrid()  # creating an object of the Hybrid class
  priusPrime.setTopSpeed(220)  # accessing methods from the parent class
  priusPrime.openTrunk()  # accessing method from the parent class
  priusPrime.turnOnHybrid()  # accessing method from the child class
#+end_src

*** Hierarchical Inheritance
More than one class extends, as per the requirement of the design, from the same base class. Common attributes of the child classes are implemented in the base class.

Example:
- A ~Car~ is a ~Vehicle~
- A ~Truck~ is a ~Vehicle~

Implementation:
#+begin_src python
  class Vehicle:  # parent class
      def setTopSpeed(self, speed):  # defining the set
          self.topSpeed = speed
          print("Top speed is set to", self.topSpeed)


  class Car(Vehicle):  # child class of Vehicle
      pass


  class Truck(Vehicle):  # child class of Vehicle
      pass


  corolla = Car()  # creating an object of the Car class
  corolla.setTopSpeed(220)  # accessing methods from the parent class

  volvo = Truck()  # creating an object of the Truck class
  volvo.setTopSpeed(180)  # accessing methods from the parent class

#+end_src

*** Multiple Inheritance
It is when a child class is derived from more than one base class.

Example:
- ~HybridEngine~ is an ~ElectricEngine~
- ~HybridEngine~ is a ~CombustionEngine~ as well

Implementation:
#+begin_src python
  class CombustionEngine():  
      def setTankCapacity(self, tankCapacity):
          self.tankCapacity = tankCapacity


  class ElectricEngine():  
      def setChargeCapacity(self, chargeCapacity):
          self.chargeCapacity = chargeCapacity

  # Child class inherited from CombustionEngine and ElectricEngine
  class HybridEngine(CombustionEngine, ElectricEngine):
      def printDetails(self):
          print("Tank Capacity:", self.tankCapacity)
          print("Charge Capacity:", self.chargeCapacity)

  car = HybridEngine()
  car.setChargeCapacity("250 W")
  car.setTankCapacity("20 Litres")
  car.printDetails()
#+end_src

*** Hybrid Inheritance
Combination of *Multiple* and *Multi-level* inheritance.

Example:
- ~CombustionEngine~ is a ~Engine~
- ~ElectricEngine~ is a ~Engine~
- ~HybridEngine~ is a ~ElectricEngine~ and a ~CombustionEngine~

Implementation:
#+begin_src python
  class Engine:  # Parent class
      def setPower(self, power):
          self.power = power


  class CombustionEngine(Engine):  # Child class inherited from Engine
      def setTankCapacity(self, tankCapacity):
          self.tankCapacity = tankCapacity


  class ElectricEngine(Engine):  # Child class inherited from Engine
      def setChargeCapacity(self, chargeCapacity):
          self.chargeCapacity = chargeCapacity

  # Child class inherited from CombustionEngine and ElectricEngine


  class HybridEngine(CombustionEngine, ElectricEngine):
      def printDetails(self):
          print("Power:", self.power)
          print("Tank Capacity:", self.tankCapacity)
          print("Charge Capacity:", self.chargeCapacity)


  car = HybridEngine()
  car.setPower("2000 CC")
  car.setChargeCapacity("250 W")
  car.setTankCapacity("20 Litres")
  car.printDetails()
#+end_src

** Advantages of Inheritance

*** Reusability
Inheritance makes code reusable by not duplicating code.

Take for example the ff:

#+begin_src python
  class BankAccount:
      holdersName
      accountBalance
      accountNumber

      def getBalance():
          pass

      def getDetails():
          pass

      def withdraw():
          pass

      def deposit():
          pass

  class SavingsAccount(BankAccount):
      interestAmount

      def addInterest():
          pass

  class CheckingAccount(BankAccount):
      linkedAtmCard

      def deductFee():
          pass
#+end_src

In this case we don't need to duplicate code for ~deposit()~ and ~withdraw()~, and at the same time we can reuse the code for the ~BankAccount~ class for any other accounts that does /withdrawal/ and /deposit/.

*** Code Modification
Changes to code are localized and inconsistencies are avoided.

This enforces *orthogonality*.

*** Extensibility
Inheritance provides an easy way to upgrade/enhance specific parts of a product without changing the core attributes

Consider the example above in ~Reusability~. If for example you realize that you have to diversify the banking application by adding another class for ~MoneyMarketAccount~. Instead of implementing a new class from scratch, we can extend it from the existing ~BankAccount~ class as the starting point.

*** Data Hiding
Base class can hide sensitive data so that the derive class cannot alter it.

This concept is called *encapsulation*.

* Polymorphism
In programming, /polymorphism/ refers to the same object exhibiting different forms and behaviors.

The problem:
Assume a parent class of ~Shape~ from which child classes ~Triangle~, ~Rectangle~, ~Circle~, etc. are derived. For calculating the area of each specific shape, there is no single implementation. Creating a function for each child class like ~getRectangleArea()~, ~getCircleArea()~, etc. woud be time consuming and makes it harder to remember each method's name.

The solution:
We could create a method in the parent class called ~getArea()~, inherited by all the subclasses. With *polymorphism*, each subclass has its own way of implementing the method.

** Implementing Polymorphism Using Methods
#+begin_src python
  class Rectangle():

      # initializer
      def __init__(self, width=0, height=0):
          self.width = width
          self.height = height
          self.sides = 4

      # method to calculate Area
      def getArea(self):
          return (self.width * self.height)


  class Circle():
      # initializer
      def __init__(self, radius=0):
          self.radius = radius
          self.sides = 0

      # method to calculate Area
      def getArea(self):
          return (self.radius * self.radius * 3.142)


  shapes = [Rectangle(6, 10), Circle(7)]
  print("Sides of a rectangle are", str(shapes[0].sides))
  print("Area of rectangle is:", str(shapes[0].getArea()))

  print("Sides of a circle are", str(shapes[1].sides))
  print("Area of circle is:", str(shapes[1].getArea()))
#+end_src

** Implementing Polymorphism using Inheritance
Using inheritance to implement polymorphism allows us to inherit a method from the base class and have a different implementation for it.

#+begin_src python
  class Shape:
      def __init__(self):
          self.sides = 0

      def getArea(self):
          pass

  class Rectangle(Shape):
      def __init__(self, width, height):
          self.width = width
          self.height = height
          self.sides = 4

      def getArea(self):
          return (self.width * self.height)

  class Circle(Shape):
      def __init__(self, radius):
          self.radius = radius
          self.sides = 0

      def getArea(self):
          return (self.radius * self.radius * 3.142)
#+end_src

** Method Overriding
It is the process of redefining a parent's class's methods in a subclass.

This process is done with the code above with implementing polymorphism with inheritance. We can see that the ~getArea()~ method from the parent class is being /overridden/ in the subclasses of ~Circle~ and ~Rectangle~.

*** Advantages and Key Features
- Derived classes can give their own implementation to inherited methods without modifying the parent class methods.
- A child class can use the implementation in the parent class or make its own implementation.
- Method overriding *needs inheritance*.
- Methods in the derived classes usually have a dissimilar implementation.

** Operator Overloading
*** Overloading operators in Python
Operators in Python can be overloaded to operate in a certain user-defined way. For example the ~+~ operator invokes the special function ~__add__~, but it behaves differently depending on the data type. Two ~int~ will add the numbers while two ~string~ get *merged*.

*** Overloading operators for a user-defined class
When defining a class, objects can interact with each other through operators, but it is necessary to define the behavior of these operators through operator overloading.

#+begin_src python
  class Com:
      def __init__(self, real=0, imag=0):
          self.real = real
          self.imag = imag

      def __add__(self, other):  # overloading the `+` operator
          temp = Com(self.real + other.real, self.imag + other.imag)
          return temp

      def __sub__(self, other):  # overloading the `-` operator
          temp = Com(self.real - other.real, self.imag - other.imag)
          return temp


  obj1 = Com(3, 7)
  obj2 = Com(2, 5)

  obj3 = obj1 + obj2
  obj4 = obj1 - obj2

  print("real of obj3:", obj3.real)
  print("imag of obj3:", obj3.imag)
  print("real of obj4:", obj4.real)
  print("imag of obj4:", obj4.imag)
#+end_src

*** Special functions for some common operators

| Operator | Method                   |
|----------+--------------------------|
| ~+~      | __add__(self, other)     |
| ~-~      | __sub__(self, other)     |
| ~/~      | __truediv__(self, other) |
| ~*~      | __mul__(self, other)     |
| ~<~      | __lt__(self, other)      |
| ~>~      | __gt__(self, other)      |
| ~==~     | __eq__(self, other)      |

** Implementing Polymorphism using Duck Typing
*Duck typing* extends the concept of *dynamic typing* in Python. *Dynamic typing* means that we can change the type of the object later in the code.

Implementation
#+begin_src python
  class Dog:
      def Speak(self):
          print("Woof woof")


  class Cat:
      def Speak(self):
          print("Meow meow")


  class AnimalSound:
      def Sound(self, animal):
          animal.Speak()


  sound = AnimalSound()
  dog = Dog()
  cat = Cat()

  sound.Sound(dog)
  sound.Sound(cat)
#+end_src

Why it is called *Duck typing*: if a bird speaks like a duck, swims like a duck, and eats like a duck, that bird is a duck.

Similarly with the code above, the ~animal~ object inside the ~AnimalSound~ definition does not matter, *as long as it has the associated behavior*, ~Speak()~ defined in the object's class definition. Since both /dog/ and /cat/ speaks like animals, they are both animals.

This is how polymorphism is achieved without inheritance.

** Abstract Base Classes
Abstract base classes define a set of methods and properties that a class must implement in order to be considered a /duck-type/ instance of that class.

#+begin_src python
  class Shape:  # Shape is a child class of ABC
      def area(self):
          pass

      def perimeter(self):
          pass


  class Square(Shape):
      def __init__(self, length):
          self.length = length

      def area(self):
          return (self.length * self.length)

      def perimeter(self):
          return (4 * self.length)


  shape = Shape()
  square = Square(4)
#+end_src

From the code above, the ~Shape~ class cannot stand on its own and the ~Square~ class is actually the one that implements the methods ~area()~ and ~perimeter()~. To prevent users from making a ~Shape~ object, we use *abstract base classes*.

*** Syntax
#+begin_src python
  # the abc module is built-in
  from abc import ABC, abstractmethod

  class ParentClass(ABC):
  # the abstract base class is inherited from the built-in ABC class    

      @abstractmethod
      def method(self)
#+end_src

Methods with ~@abstractmethod~ decorator MUST be defined in the child class. It serves as like a REQUIRED blueprint.

* Object Relationships
** Relationships Between Classes
- *IS A*
- *Part-of*
  - One class is a component of another class object.
  - The instance of the component class can only be created inside the main class.
  - An example is ~class B~ and ~class C~ have their own implementation but can only be created once a ~class A~ object is created.
- *Has-a*
  - Slightly less concrete relationship than the above two.
  - Classes can exist independently of each other but need each other's object to perform an operation.
  - Implies that a class /has a/ reference to an object of another class but does not decide the lifetime of the other class's reference object.
    
** Association
Association is the common term for both the *has-a* and *part-of* relationships but is not limited to these.

Association relationship = we don't worry about the lifetime dependency between the objects.

** Aggregation
Follows the *Has-a* model and creates a parent-child relationship between two classes with one class owning the other.

Has *indpendent lifetimes* where the owned object does not depend on the lifetime of the owner.

The parent only contains a *reference* to the child.

Implementation:
#+begin_src python
  class Country:
      def __init__(self, name=None, population=0):
          self.name = name
          self.population = population

      def printDetails(self):
          print("Country Name:", self.name)
          print("Country Population", self.population)


  class Person:
      def __init__(self, name, country):
          # country becomes a reference to the Country object
          # Country class however is not reliant on the Person class to function
          self.name = name
          self.country = country

      def printDetails(self):
          print("Person Name:", self.name)
          self.country.printDetails()


  c = Country("Wales", 1500)
  p = Person("Joe", c)
  p.printDetails()

  # deletes the object p
  del p
  print("")
  c.printDetails()
#+end_src

From the code above, we can delete the ~Person~ object and the ~Country~ object still functions as intended.

** Composition
Composition is the practice of accessing other class objects in your class. It follows *part-of* relationships.

The class which creates the object of the other class is the /owner/ and is reponsible for the lifetime of that object. The lifetime of the /owned/ object depends on the lifetime of the owner

Implementation:

A ~Car~ owns the ~tires~, ~doors~, and ~engine~.

#+begin_src python
  class Engine:
      def __init__(self, capacity=0):
          self.capacity = capacity

      def printDetails(self):
          print("Engine Details:", self.capacity)


  class Tires:
      def __init__(self, tires=0):
          self.tires = tires

      def printDetails(self):
          print("Number of tires:", self.tires)


  class Doors:
      def __init__(self, doors=0):
          self.doors = doors

      def printDetails(self):
          print("Number of doors:", self.doors)


  class Car:
      def __init__(self, eng, tr, dr, color):
          self.eObj = Engine(eng)
          self.tObj = Tires(tr)
          self.dObj = Doors(dr)
          self.color = color

      def printDetails(self):
          self.eObj.printDetails()
          self.tObj.printDetails()
          self.dObj.printDetails()
          print("Car color:", self.color)


  car = Car(1600, 4, 2, "Grey")
  car.printDetails()
#+end_src

When the ~Car~ object dies, so does the owned objects as well.
