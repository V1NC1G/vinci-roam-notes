:PROPERTIES:
:ID:       9FF58AD1-A414-43E8-B88D-33E4BFC7440B
:END:
#+title: IAM Roles
#+tags: [[id:408B7225-BAE3-4B4B-B1E8-C12C831563B0][Associate Shared]]

* IAM Roles
Roles are suited to be used with an unknown number or multiple principals. It could be IAM users, or applications/humans outside of the AWS account.

It also generally used in a temporary basis.

It represents a level of access inside an AWS account. It does not represent you/the user.

#+begin_quote
assume the role -> become that role -> use the permissions -> stop being that role
#+end_quote

Users essential BORROW the permission for a short amount of time.

Roles are REAL IDENTITIES, meaning that it can be referenced like IAM Users.

** Difference of assuming a role and users
- IAM Users
  - Permissions policies attached to them
    - Inline
    - Managed
- IAM Roles
  - Trust policy
    - Controls which identity can assume that role
    - Can reference identities in the same AWS account
    - Can reference identities on another AWS account
    - Can also allow anonymous identities, and other types of identities
    - If allowed to assume the role, creates *temporary security credentials*
      - Once expired, the identity needs to renew and assume the role again
      - Temporary credentials are generated by STS (Secure Token Service)
        - ~sts:AssumeRole~
  - Permissions policy
    - With temporary security credentials
      - Can access the resources defined in the permissions policy

* When to use IAM Roles
- Anything that is not an identity, like an application or compute service, needs to be given permission.
  - In the case for AWS Lambda, we can give it a ~Lambda Execution Role~ (an IAM Role)
    - This execution role has a trust policy to trust the Lambda service, and a permissions policy to grant access to AWS services
    - When it runs, uses the ~sts:AssumeRole~ operation
  - If a service/application does not use a role, we need to hard code the access keys which is not recommended
    - Can cause issues when rotating keys, security, etc.
- Emergency or unusual situations
- Adding AWS to an existing corporate environment
  - External accounts cannot be used in AWS directly
  - Called *ID Federation*
- Designing an application with > 5000 identities/users
  - Fixed by *Web Identity Federation* which uses IAM Roles
  - No AWS credentials on the application
  - Makes use of existing customer accounts
  - Can scale with large amounts of users
- Multiple AWS accounts
